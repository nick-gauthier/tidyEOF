#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by esgf-node.llnl.gov - 2020/12/10 09:23:05
# Search URL: https://esgf-node.llnl.gov/esg-search/wget/?distrib=false&query=snw&dataset_id=cmip5.output1.NASA-GISS.GISS-E2-R.past1000.mon.landIce.LImon.r1i1p126.v20160511|dataserver.nccs.nasa.gov&dataset_id=cmip5.output1.NASA-GISS.GISS-E2-R.past1000.mon.landIce.LImon.r1i1p122.v20160510|dataserver.nccs.nasa.gov&dataset_id=cmip5.output1.NASA-GISS.GISS-E2-R.past1000.mon.landIce.LImon.r1i1p128.v20160511|dataserver.nccs.nasa.gov&dataset_id=cmip5.output1.NASA-GISS.GISS-E2-R.past1000.mon.landIce.LImon.r1i1p121.v20160510|dataserver.nccs.nasa.gov&dataset_id=cmip5.output1.NASA-GISS.GISS-E2-R.past1000.mon.landIce.LImon.r1i1p1221.v20160510|dataserver.nccs.nasa.gov&dataset_id=cmip5.output1.NASA-GISS.GISS-E2-R.past1000.mon.landIce.LImon.r1i1p123.v20160510|dataserver.nccs.nasa.gov&dataset_id=cmip5.output1.MIROC.MIROC-ESM.past1000.mon.landIce.LImon.r1i1p1.v20111228|esgf-data1.diasjp.net&dataset_id=cmip5.output1.MRI.MRI-CGCM3.past1000.mon.landIce.LImon.r1i1p1.v20140306|esgf-data1.diasjp.net
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='https://esgf-node.llnl.gov/esg-search/wget/?distrib=false&query=snw&dataset_id=cmip5.output1.NASA-GISS.GISS-E2-R.past1000.mon.landIce.LImon.r1i1p126.v20160511|dataserver.nccs.nasa.gov&dataset_id=cmip5.output1.NASA-GISS.GISS-E2-R.past1000.mon.landIce.LImon.r1i1p122.v20160510|dataserver.nccs.nasa.gov&dataset_id=cmip5.output1.NASA-GISS.GISS-E2-R.past1000.mon.landIce.LImon.r1i1p128.v20160511|dataserver.nccs.nasa.gov&dataset_id=cmip5.output1.NASA-GISS.GISS-E2-R.past1000.mon.landIce.LImon.r1i1p121.v20160510|dataserver.nccs.nasa.gov&dataset_id=cmip5.output1.NASA-GISS.GISS-E2-R.past1000.mon.landIce.LImon.r1i1p1221.v20160510|dataserver.nccs.nasa.gov&dataset_id=cmip5.output1.NASA-GISS.GISS-E2-R.past1000.mon.landIce.LImon.r1i1p123.v20160510|dataserver.nccs.nasa.gov&dataset_id=cmip5.output1.MIROC.MIROC-ESM.past1000.mon.landIce.LImon.r1i1p1.v20111228|esgf-data1.diasjp.net&dataset_id=cmip5.output1.MRI.MRI-CGCM3.past1000.mon.landIce.LImon.r1i1p1.v20140306|esgf-data1.diasjp.net'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'snw_LImon_MIROC-ESM_past1000_r1i1p1_085001-184912.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MIROC/MIROC-ESM/past1000/mon/landIce/LImon/r1i1p1/v20111228/snw/snw_LImon_MIROC-ESM_past1000_r1i1p1_085001-184912.nc' 'SHA256' 'bf4391fea5b6f366f33097fb141fb6b17fb44bdab81f646e9d5cd59d47013b19'
'snw_LImon_MRI-CGCM3_past1000_r1i1p1_085001-134912.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MRI/MRI-CGCM3/past1000/mon/landIce/LImon/r1i1p1/v20140306/snw/snw_LImon_MRI-CGCM3_past1000_r1i1p1_085001-134912.nc' 'SHA256' '2dfc8a40d0ef03b18f15831bcc031a12bf678529216a42b758787def73a053e1'
'snw_LImon_MRI-CGCM3_past1000_r1i1p1_135001-184912.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MRI/MRI-CGCM3/past1000/mon/landIce/LImon/r1i1p1/v20140306/snw/snw_LImon_MRI-CGCM3_past1000_r1i1p1_135001-184912.nc' 'SHA256' 'f0b1d3520973726102c79d413221d801f152375054b6f6c94bb800c314cc94a5'
'snw_LImon_MRI-CGCM3_past1000_r1i1p1_185001-185012.nc' 'http://esgf-data1.diasjp.net/thredds/fileServer/esg_dataroot/cmip5/output1/MRI/MRI-CGCM3/past1000/mon/landIce/LImon/r1i1p1/v20140306/snw/snw_LImon_MRI-CGCM3_past1000_r1i1p1_185001-185012.nc' 'SHA256' '495759a58883ebf67a44033d047df8bf45cca90e52168d2cb2b79f63ac69a5da'
'snw_LImon_GISS-E2-R_past1000_r1i1p121_085001-089912.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p121/snw_LImon_GISS-E2-R_past1000_r1i1p121_085001-089912.nc' 'SHA256' 'd4a4811af36e021c2eb81d4e4ab356f75c109c362f71cb1c3820e364f787dfb0'
'snw_LImon_GISS-E2-R_past1000_r1i1p121_090001-094912.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p121/snw_LImon_GISS-E2-R_past1000_r1i1p121_090001-094912.nc' 'SHA256' '47719f2f6f453d10d5e4a32a6b00a8716b59daeddee60ee3836627437960702a'
'snw_LImon_GISS-E2-R_past1000_r1i1p121_095001-099912.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p121/snw_LImon_GISS-E2-R_past1000_r1i1p121_095001-099912.nc' 'SHA256' '800b21e56b6dcd6658b90f349de2b4894e7c6a3ec88531bbc6c8a5cd90147f60'
'snw_LImon_GISS-E2-R_past1000_r1i1p121_100001-105012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p121/snw_LImon_GISS-E2-R_past1000_r1i1p121_100001-105012.nc' 'SHA256' '01ccd043f4ae1c72e4799b56d68cd84e7b2375d87c8d77372cbd595f2cd60c5f'
'snw_LImon_GISS-E2-R_past1000_r1i1p121_105101-110012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p121/snw_LImon_GISS-E2-R_past1000_r1i1p121_105101-110012.nc' 'SHA256' 'f9bf332a50be815440ae855bbda48d13a20b0788d4a0c114f23b9bee76b177d2'
'snw_LImon_GISS-E2-R_past1000_r1i1p121_110101-115012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p121/snw_LImon_GISS-E2-R_past1000_r1i1p121_110101-115012.nc' 'SHA256' '67e9ea39d6641d9f3c7e80a61cc6134b0f202b3bfdac71bb160235914ed1e776'
'snw_LImon_GISS-E2-R_past1000_r1i1p121_115101-120012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p121/snw_LImon_GISS-E2-R_past1000_r1i1p121_115101-120012.nc' 'SHA256' 'cd8af6b0e92dda5a90f6f0469ebc7059aaf27288b87070b4e3e4bc2708590c3e'
'snw_LImon_GISS-E2-R_past1000_r1i1p121_120101-125012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p121/snw_LImon_GISS-E2-R_past1000_r1i1p121_120101-125012.nc' 'SHA256' '2d89195e6462e8ce3f60d6a9540bac97e18ec3d0fe7431f56777113238437cbc'
'snw_LImon_GISS-E2-R_past1000_r1i1p121_125101-130012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p121/snw_LImon_GISS-E2-R_past1000_r1i1p121_125101-130012.nc' 'SHA256' '70b7358fa6ea6e34313bfa205f5566102adaa6d40ad05f34b203a1113c1099c6'
'snw_LImon_GISS-E2-R_past1000_r1i1p121_130101-135012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p121/snw_LImon_GISS-E2-R_past1000_r1i1p121_130101-135012.nc' 'SHA256' '74eb515ab1aac1f4b5f8cba197854953608266e6ef51098cb1bde6b1f190450b'
'snw_LImon_GISS-E2-R_past1000_r1i1p121_135101-140012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p121/snw_LImon_GISS-E2-R_past1000_r1i1p121_135101-140012.nc' 'SHA256' '683179e71c9e20317558883d4b77ad75122fd017479b4b1dc92856d95389d6f7'
'snw_LImon_GISS-E2-R_past1000_r1i1p121_140101-145012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p121/snw_LImon_GISS-E2-R_past1000_r1i1p121_140101-145012.nc' 'SHA256' 'dd4c5c95c5ae12c4ef7c59ef76d1a27a242fd32885643267682f4c1975b7051a'
'snw_LImon_GISS-E2-R_past1000_r1i1p121_145101-150012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p121/snw_LImon_GISS-E2-R_past1000_r1i1p121_145101-150012.nc' 'SHA256' 'f1651697616d74f698c33c63a27bf03b09483d50bef8f91ce13d6bcacd1ea83d'
'snw_LImon_GISS-E2-R_past1000_r1i1p121_150101-155012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p121/snw_LImon_GISS-E2-R_past1000_r1i1p121_150101-155012.nc' 'SHA256' '63c23bdf6a3b6561dfcd891cbbc712195464368723eaeb12cf07aec61f5e1962'
'snw_LImon_GISS-E2-R_past1000_r1i1p121_155101-160012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p121/snw_LImon_GISS-E2-R_past1000_r1i1p121_155101-160012.nc' 'SHA256' '57bc2ea57dd0d79fb862d4951f1b8022299ba828b7db390a07d07fb2bbcfd9b1'
'snw_LImon_GISS-E2-R_past1000_r1i1p121_160101-165012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p121/snw_LImon_GISS-E2-R_past1000_r1i1p121_160101-165012.nc' 'SHA256' '49dfc660ba27fdb9006325cae1305d8b33261c0940cec36bc9f48c887600f0b3'
'snw_LImon_GISS-E2-R_past1000_r1i1p121_165101-170012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p121/snw_LImon_GISS-E2-R_past1000_r1i1p121_165101-170012.nc' 'SHA256' 'e04578286a92b28ead07f7d8efe59e995aaee86f2082a845ef13c65c26903049'
'snw_LImon_GISS-E2-R_past1000_r1i1p121_170101-175012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p121/snw_LImon_GISS-E2-R_past1000_r1i1p121_170101-175012.nc' 'SHA256' '26ffc21859f663a2d5e203c4100a86ae787a30d6e0cbeafb98cec7ad5d468fef'
'snw_LImon_GISS-E2-R_past1000_r1i1p121_175101-180012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p121/snw_LImon_GISS-E2-R_past1000_r1i1p121_175101-180012.nc' 'SHA256' '49cfd0a178f49dff5f40000e177b6597ea99879e61974bc207853d3ac7431f1e'
'snw_LImon_GISS-E2-R_past1000_r1i1p121_180101-185012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p121/snw_LImon_GISS-E2-R_past1000_r1i1p121_180101-185012.nc' 'SHA256' '9056fdfaf68ab85c26a95625d5b414f7591824e8fbb6546f14197b805c27f2e4'
'snw_LImon_GISS-E2-R_past1000_r1i1p122_085001-089912.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p122/snw_LImon_GISS-E2-R_past1000_r1i1p122_085001-089912.nc' 'SHA256' '55e4df72b85931c2de58a487c531761c378080f5ae7b161d86ce8215a5cd64ce'
'snw_LImon_GISS-E2-R_past1000_r1i1p122_090001-094912.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p122/snw_LImon_GISS-E2-R_past1000_r1i1p122_090001-094912.nc' 'SHA256' 'ffc7540204124e355c887e8519fca5404bda4d1be26a1b45c5cfd234fbb8ffc9'
'snw_LImon_GISS-E2-R_past1000_r1i1p122_095001-099912.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p122/snw_LImon_GISS-E2-R_past1000_r1i1p122_095001-099912.nc' 'SHA256' '6f2a2a4bdfa3a1b23aeb995c15832776ea6b3a07d10562139db247e862740966'
'snw_LImon_GISS-E2-R_past1000_r1i1p122_100001-105012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p122/snw_LImon_GISS-E2-R_past1000_r1i1p122_100001-105012.nc' 'SHA256' '0575af32af5c16fe1a717ee74c44ba3cb61a15fee6a4a3e77923d8678220c3a7'
'snw_LImon_GISS-E2-R_past1000_r1i1p122_105101-110012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p122/snw_LImon_GISS-E2-R_past1000_r1i1p122_105101-110012.nc' 'SHA256' 'ec8b6c32fab3f3c335a9bcdb9354f550f318c42a85eb76fb3d1a72f842790e4c'
'snw_LImon_GISS-E2-R_past1000_r1i1p122_110101-115012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p122/snw_LImon_GISS-E2-R_past1000_r1i1p122_110101-115012.nc' 'SHA256' '5483a2eda7fc7616a432207ca3f28c98a933c224d2c020e92c5d8d4132d96a6b'
'snw_LImon_GISS-E2-R_past1000_r1i1p122_115101-120012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p122/snw_LImon_GISS-E2-R_past1000_r1i1p122_115101-120012.nc' 'SHA256' 'd0732474619d9be684992488707bdc9e26b22517e4da503ebcc1d726cec44c84'
'snw_LImon_GISS-E2-R_past1000_r1i1p122_120101-125012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p122/snw_LImon_GISS-E2-R_past1000_r1i1p122_120101-125012.nc' 'SHA256' '721170a5e0874888586219d329209ee86b5ada67dd3b6f7a99d7d2323e65ffaf'
'snw_LImon_GISS-E2-R_past1000_r1i1p122_125101-130012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p122/snw_LImon_GISS-E2-R_past1000_r1i1p122_125101-130012.nc' 'SHA256' '60e0a518872a15e110b7db043d70675b38df8bab90f16bea08b33ba6e8e9dc58'
'snw_LImon_GISS-E2-R_past1000_r1i1p122_130101-135012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p122/snw_LImon_GISS-E2-R_past1000_r1i1p122_130101-135012.nc' 'SHA256' 'a75ecf270d8520694609ef66c0269bf853412ad0a68fa49ab17d967e055a2b47'
'snw_LImon_GISS-E2-R_past1000_r1i1p122_135101-140012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p122/snw_LImon_GISS-E2-R_past1000_r1i1p122_135101-140012.nc' 'SHA256' 'b70c833e8323863b1a5abbdc64315c204ea26c906a098d540717ff1aafc193a1'
'snw_LImon_GISS-E2-R_past1000_r1i1p122_140101-145012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p122/snw_LImon_GISS-E2-R_past1000_r1i1p122_140101-145012.nc' 'SHA256' '106c82e5e346a0a3a05dbef9b44701a504dd6c0e0e2af7803889923ffe428042'
'snw_LImon_GISS-E2-R_past1000_r1i1p122_145101-150012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p122/snw_LImon_GISS-E2-R_past1000_r1i1p122_145101-150012.nc' 'SHA256' 'eff23862622e219eac5cad0b6957cf59749729dc595832b242f8e2a8dd45f736'
'snw_LImon_GISS-E2-R_past1000_r1i1p122_150101-155012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p122/snw_LImon_GISS-E2-R_past1000_r1i1p122_150101-155012.nc' 'SHA256' '2c178f5b1ddee402c9b3a1526464a7c7f076220a111a4c500847194256c52a03'
'snw_LImon_GISS-E2-R_past1000_r1i1p122_155101-160012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p122/snw_LImon_GISS-E2-R_past1000_r1i1p122_155101-160012.nc' 'SHA256' 'f311fa7e09eaf55d0d25633e224414f63b4d7d0768b9c5a7ae6f88f92b2192ae'
'snw_LImon_GISS-E2-R_past1000_r1i1p122_160101-165012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p122/snw_LImon_GISS-E2-R_past1000_r1i1p122_160101-165012.nc' 'SHA256' '29d6056722f57bce29922e4e4eb4d3669b4c69136bd8b9aa04941fc5643b8faa'
'snw_LImon_GISS-E2-R_past1000_r1i1p122_165101-170012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p122/snw_LImon_GISS-E2-R_past1000_r1i1p122_165101-170012.nc' 'SHA256' '3fdee2cec53aeab8e7e219e12c953ed8ff91101a71272eeaf8acdc711d8a52db'
'snw_LImon_GISS-E2-R_past1000_r1i1p122_170101-175012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p122/snw_LImon_GISS-E2-R_past1000_r1i1p122_170101-175012.nc' 'SHA256' 'a0ac00f1c3b140438d178caaba4fe2693a83358997e345cc4cf8ae498ca3820a'
'snw_LImon_GISS-E2-R_past1000_r1i1p122_175101-180012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p122/snw_LImon_GISS-E2-R_past1000_r1i1p122_175101-180012.nc' 'SHA256' '3da61374353071502321ffd56b5c1cd86e6cf7da330dd94e0287d387d3ee829d'
'snw_LImon_GISS-E2-R_past1000_r1i1p122_180101-185012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p122/snw_LImon_GISS-E2-R_past1000_r1i1p122_180101-185012.nc' 'SHA256' '733d4a319fd75d67be619523bd86524613f224a7c1169d4519011dbbcf66ee04'
'snw_LImon_GISS-E2-R_past1000_r1i1p1221_085001-089912.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p1221/snw_LImon_GISS-E2-R_past1000_r1i1p1221_085001-089912.nc' 'SHA256' '6bbd03bc50d3b1f047c0f7f6296277dab66f16dfc3d4607ca5e033f90d45a7d7'
'snw_LImon_GISS-E2-R_past1000_r1i1p1221_090001-094912.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p1221/snw_LImon_GISS-E2-R_past1000_r1i1p1221_090001-094912.nc' 'SHA256' '7bdc0fa2c54e310cf64869fdaa79276605ab5c6704e7702dfecb5145de40dba7'
'snw_LImon_GISS-E2-R_past1000_r1i1p1221_095001-099912.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p1221/snw_LImon_GISS-E2-R_past1000_r1i1p1221_095001-099912.nc' 'SHA256' '5cd7f9ab6d11749b804f791b59daa653e0e2c14c4eb7965be0da6a4108b19f23'
'snw_LImon_GISS-E2-R_past1000_r1i1p1221_100001-105012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p1221/snw_LImon_GISS-E2-R_past1000_r1i1p1221_100001-105012.nc' 'SHA256' 'e8ddad02b0512c515f1286e10fdf178b431938fa0d7f0100448efd5bd7637b63'
'snw_LImon_GISS-E2-R_past1000_r1i1p1221_105101-110012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p1221/snw_LImon_GISS-E2-R_past1000_r1i1p1221_105101-110012.nc' 'SHA256' 'da2ba9a4f9b956aef64924c397d3abafc61fb43a872e0b42eaab9102bffd0db1'
'snw_LImon_GISS-E2-R_past1000_r1i1p1221_110101-115012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p1221/snw_LImon_GISS-E2-R_past1000_r1i1p1221_110101-115012.nc' 'SHA256' '8cf5f2e36764001c3d478370d509586d3671c9d97428075abaf56a817e657ccc'
'snw_LImon_GISS-E2-R_past1000_r1i1p1221_115101-120012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p1221/snw_LImon_GISS-E2-R_past1000_r1i1p1221_115101-120012.nc' 'SHA256' '8f356933339853a0eb70ff21c9bdfbf53c147b780f1c6d1d49c263a5c66d9858'
'snw_LImon_GISS-E2-R_past1000_r1i1p1221_120101-125012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p1221/snw_LImon_GISS-E2-R_past1000_r1i1p1221_120101-125012.nc' 'SHA256' 'dc78302bb2ccc358ef8938f542c9107d184ce56050fc9f35ea3ffb250032d76e'
'snw_LImon_GISS-E2-R_past1000_r1i1p1221_125101-130012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p1221/snw_LImon_GISS-E2-R_past1000_r1i1p1221_125101-130012.nc' 'SHA256' 'a3db079b7a3bf2572b188a86a6e7d6e67dd259a8406415d675ab634ecf655b65'
'snw_LImon_GISS-E2-R_past1000_r1i1p1221_130101-135012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p1221/snw_LImon_GISS-E2-R_past1000_r1i1p1221_130101-135012.nc' 'SHA256' 'e0f49daf6ad33b5d4dfd1f2add1ef107ccd258bf328937722b983a5d6ca53b03'
'snw_LImon_GISS-E2-R_past1000_r1i1p1221_135101-140012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p1221/snw_LImon_GISS-E2-R_past1000_r1i1p1221_135101-140012.nc' 'SHA256' 'f1518ccf7e170722d796b5499c48b314dd9ed1704ab9a8a2f33bb55f871ed934'
'snw_LImon_GISS-E2-R_past1000_r1i1p1221_140101-145012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p1221/snw_LImon_GISS-E2-R_past1000_r1i1p1221_140101-145012.nc' 'SHA256' 'ab9080a5e425833b0daf0b8b15e10b7c1c90a1c3ca072aceb8731dc478353c0e'
'snw_LImon_GISS-E2-R_past1000_r1i1p1221_145101-150012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p1221/snw_LImon_GISS-E2-R_past1000_r1i1p1221_145101-150012.nc' 'SHA256' '009a14777df770f7c709eca16f8e7c0f1e231228230cfccb434699f62dc3705c'
'snw_LImon_GISS-E2-R_past1000_r1i1p1221_150101-155012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p1221/snw_LImon_GISS-E2-R_past1000_r1i1p1221_150101-155012.nc' 'SHA256' '2e0c487da9dcc3dc12d3be34dd9ae812f299b0f3132d79405e90ff525b2a7914'
'snw_LImon_GISS-E2-R_past1000_r1i1p1221_155101-160012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p1221/snw_LImon_GISS-E2-R_past1000_r1i1p1221_155101-160012.nc' 'SHA256' '8718d5318d5e2f3eddd99338798dbec79be22a81a53df58823667ccc0feb3914'
'snw_LImon_GISS-E2-R_past1000_r1i1p1221_160101-165012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p1221/snw_LImon_GISS-E2-R_past1000_r1i1p1221_160101-165012.nc' 'SHA256' '8ee03df567ffb2b724d2c83ae775c1449d30a7dac7aadf5f59c644c94c24d76d'
'snw_LImon_GISS-E2-R_past1000_r1i1p1221_165101-170012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p1221/snw_LImon_GISS-E2-R_past1000_r1i1p1221_165101-170012.nc' 'SHA256' 'fc3082b61a4e768cf550f56ec7ec96d616081dfeb919b635526e72ffbd16fb4f'
'snw_LImon_GISS-E2-R_past1000_r1i1p1221_170101-175012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p1221/snw_LImon_GISS-E2-R_past1000_r1i1p1221_170101-175012.nc' 'SHA256' 'b2fa289f293d24f654e9e7857a6fc4d59b24856350e0155eaf06debebb7b4429'
'snw_LImon_GISS-E2-R_past1000_r1i1p1221_175101-180012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p1221/snw_LImon_GISS-E2-R_past1000_r1i1p1221_175101-180012.nc' 'SHA256' '0707ad699ce1dbebf514af564184283ad8f24fc62023772f2c318378dbec55f8'
'snw_LImon_GISS-E2-R_past1000_r1i1p1221_180101-185012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p1221/snw_LImon_GISS-E2-R_past1000_r1i1p1221_180101-185012.nc' 'SHA256' '897586b13061e766a6653e007f8b682557953b4ade7d0c5c72e311f3dc4b0d3c'
'snw_LImon_GISS-E2-R_past1000_r1i1p123_085001-089912.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p123/snw_LImon_GISS-E2-R_past1000_r1i1p123_085001-089912.nc' 'SHA256' '7763ebd5f879546c97adeee2c76e7bb107bba3119fd94e07d8645effb0daaaaf'
'snw_LImon_GISS-E2-R_past1000_r1i1p123_090001-094912.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p123/snw_LImon_GISS-E2-R_past1000_r1i1p123_090001-094912.nc' 'SHA256' '398d302043e0c4f96637d06c27663c1c81b3e6dc0cdca71c5dabe48bf3493a1b'
'snw_LImon_GISS-E2-R_past1000_r1i1p123_095001-099912.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p123/snw_LImon_GISS-E2-R_past1000_r1i1p123_095001-099912.nc' 'SHA256' 'b229a19526c4de4e19bb5c496de2a093b20c14c7455c0a24150d23ad5dc9babc'
'snw_LImon_GISS-E2-R_past1000_r1i1p123_100001-105012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p123/snw_LImon_GISS-E2-R_past1000_r1i1p123_100001-105012.nc' 'SHA256' '8df3adf6c4b1547acbdbf2f76590a3d2ab906c6c3d35ae654f5eef257afef289'
'snw_LImon_GISS-E2-R_past1000_r1i1p123_105101-110012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p123/snw_LImon_GISS-E2-R_past1000_r1i1p123_105101-110012.nc' 'SHA256' '9dd0fc4f68a6c42357c50b3742cc7b0072c34c4ad6810aafef1dd469e44c93a8'
'snw_LImon_GISS-E2-R_past1000_r1i1p123_110101-115012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p123/snw_LImon_GISS-E2-R_past1000_r1i1p123_110101-115012.nc' 'SHA256' '6c44bad648ddce706b687ea9331520c4d74e7cd3cbebd023c01b1fbb194634e8'
'snw_LImon_GISS-E2-R_past1000_r1i1p123_115101-120012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p123/snw_LImon_GISS-E2-R_past1000_r1i1p123_115101-120012.nc' 'SHA256' '80a7bb903ff3bc0d9d6e56fb04db7b975b8359f583fd0c823c87c92bde6fec80'
'snw_LImon_GISS-E2-R_past1000_r1i1p123_120101-125012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p123/snw_LImon_GISS-E2-R_past1000_r1i1p123_120101-125012.nc' 'SHA256' 'd6fa17aa7e3d8fc9b694b2d797e167cddccef1f1989710096d1d4eb20287b0ff'
'snw_LImon_GISS-E2-R_past1000_r1i1p123_125101-130012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p123/snw_LImon_GISS-E2-R_past1000_r1i1p123_125101-130012.nc' 'SHA256' 'b6a029a4708b0c49e79372b8703ddb27c1ba9e62896287c2ec6d814841f0db09'
'snw_LImon_GISS-E2-R_past1000_r1i1p123_130101-135012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p123/snw_LImon_GISS-E2-R_past1000_r1i1p123_130101-135012.nc' 'SHA256' 'e114ebb053e91f96eb9cd5c0af7cf9efa5f009105099d5a02dfcd5a9f0f68f67'
'snw_LImon_GISS-E2-R_past1000_r1i1p123_135101-140012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p123/snw_LImon_GISS-E2-R_past1000_r1i1p123_135101-140012.nc' 'SHA256' 'eb34c159a1e12e6d5e269e785a460e48ce02017833e70a6909f634803f61d964'
'snw_LImon_GISS-E2-R_past1000_r1i1p123_140101-145012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p123/snw_LImon_GISS-E2-R_past1000_r1i1p123_140101-145012.nc' 'SHA256' 'ef0269178efd3f9d689d935288c7099543448e8656d1ba2ef2d80ea175fe4e17'
'snw_LImon_GISS-E2-R_past1000_r1i1p123_145101-150012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p123/snw_LImon_GISS-E2-R_past1000_r1i1p123_145101-150012.nc' 'SHA256' '973f6bd20c75bebd8ef58608a3d3d572d7c44e4b10124b0fa8a00f3cbb20c293'
'snw_LImon_GISS-E2-R_past1000_r1i1p123_150101-155012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p123/snw_LImon_GISS-E2-R_past1000_r1i1p123_150101-155012.nc' 'SHA256' '53d25dbb1b04b195168d3866b62671b8e82d20f6e8134d5961bb62f7ecaea873'
'snw_LImon_GISS-E2-R_past1000_r1i1p123_155101-160012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p123/snw_LImon_GISS-E2-R_past1000_r1i1p123_155101-160012.nc' 'SHA256' '305025b8fb0e1a1b3fb1bd8116259f502f561e447f89c22e5484f195088deb97'
'snw_LImon_GISS-E2-R_past1000_r1i1p123_160101-165012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p123/snw_LImon_GISS-E2-R_past1000_r1i1p123_160101-165012.nc' 'SHA256' '111209f8ed82c3b25e1095e01a88001ea9e17ea8cdf34b78827a7dcd28d147b4'
'snw_LImon_GISS-E2-R_past1000_r1i1p123_165101-170012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p123/snw_LImon_GISS-E2-R_past1000_r1i1p123_165101-170012.nc' 'SHA256' '0c182cfd9b95b84d706fb8715683279dadf54f82024d9fc422df36e1347240d0'
'snw_LImon_GISS-E2-R_past1000_r1i1p123_170101-175012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p123/snw_LImon_GISS-E2-R_past1000_r1i1p123_170101-175012.nc' 'SHA256' 'fed5e09f4b2560fdec5661d0d8a67819cbb6f2490aa6be44fe868ca255664f04'
'snw_LImon_GISS-E2-R_past1000_r1i1p123_175101-180012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p123/snw_LImon_GISS-E2-R_past1000_r1i1p123_175101-180012.nc' 'SHA256' 'a73b0449a240356888eb693d036aaabba4f3b4c7503c4f547d7202c8f0a0b20b'
'snw_LImon_GISS-E2-R_past1000_r1i1p123_180101-185012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p123/snw_LImon_GISS-E2-R_past1000_r1i1p123_180101-185012.nc' 'SHA256' '4d9a6a0b8ae363840c76c14ebbcb9918818d40dbab8c917895c4f1db84d41a51'
'snw_LImon_GISS-E2-R_past1000_r1i1p126_085001-089912.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p126/snw_LImon_GISS-E2-R_past1000_r1i1p126_085001-089912.nc' 'SHA256' 'e53883db8b889f325039061b145bf7da5c9a6723f514be06bb1918744115fded'
'snw_LImon_GISS-E2-R_past1000_r1i1p126_090001-094912.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p126/snw_LImon_GISS-E2-R_past1000_r1i1p126_090001-094912.nc' 'SHA256' '03b518943c5041088b8b43910f6a7cf571773fe731f57e247c1fc2a754b53c57'
'snw_LImon_GISS-E2-R_past1000_r1i1p126_095001-099912.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p126/snw_LImon_GISS-E2-R_past1000_r1i1p126_095001-099912.nc' 'SHA256' '8c22ec0543a622aff526adb86de00b160fdc5ac3901759c99d9fad72cee7c54c'
'snw_LImon_GISS-E2-R_past1000_r1i1p126_100001-105012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p126/snw_LImon_GISS-E2-R_past1000_r1i1p126_100001-105012.nc' 'SHA256' '2868fad0508698c5448a3be080616107866d174286cfbbe46a0f5401c1dbe09a'
'snw_LImon_GISS-E2-R_past1000_r1i1p126_105101-110012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p126/snw_LImon_GISS-E2-R_past1000_r1i1p126_105101-110012.nc' 'SHA256' '7b812cdeacec05bb25b0c24ee937eb109c55fca2c8d9231d52a42c2e729af245'
'snw_LImon_GISS-E2-R_past1000_r1i1p126_110101-115012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p126/snw_LImon_GISS-E2-R_past1000_r1i1p126_110101-115012.nc' 'SHA256' '5f5cfd753bc324658df82b69bb775742300b4a483ed14ca72bf405878cdfe608'
'snw_LImon_GISS-E2-R_past1000_r1i1p126_115101-120012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p126/snw_LImon_GISS-E2-R_past1000_r1i1p126_115101-120012.nc' 'SHA256' 'a99424ecbf0c27d4bddabafc1382d6c4cade8df32bab3c0eac7372db59819bcc'
'snw_LImon_GISS-E2-R_past1000_r1i1p126_120101-125012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p126/snw_LImon_GISS-E2-R_past1000_r1i1p126_120101-125012.nc' 'SHA256' '262e4fe00413ceaf96b027e56ee779792487f41dad9a75d19a4ee57534870801'
'snw_LImon_GISS-E2-R_past1000_r1i1p126_125101-130012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p126/snw_LImon_GISS-E2-R_past1000_r1i1p126_125101-130012.nc' 'SHA256' 'ac7b14482274a978c71f7778d4e9e6160b2788a135b96fddf267ed634f845919'
'snw_LImon_GISS-E2-R_past1000_r1i1p126_130101-135012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p126/snw_LImon_GISS-E2-R_past1000_r1i1p126_130101-135012.nc' 'SHA256' '0d04fa6d8ef31b19d7504d5e92696caa79b738e2aa8158b7097ed327f377878c'
'snw_LImon_GISS-E2-R_past1000_r1i1p126_135101-140012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p126/snw_LImon_GISS-E2-R_past1000_r1i1p126_135101-140012.nc' 'SHA256' '3e1f57b66c3a22f6ebe08b97b7b1b0f6e4db0f30c67bf5df38199dac5c15d2c3'
'snw_LImon_GISS-E2-R_past1000_r1i1p126_140101-145012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p126/snw_LImon_GISS-E2-R_past1000_r1i1p126_140101-145012.nc' 'SHA256' 'b5ad560dd621472b960345f9d4ce15c1ff7babcc9f17b4a27bb3b517c0d4c822'
'snw_LImon_GISS-E2-R_past1000_r1i1p126_145101-150012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p126/snw_LImon_GISS-E2-R_past1000_r1i1p126_145101-150012.nc' 'SHA256' '784315535ea4de5e2f8f35182ba1fad48260bdfd551f1430477084f766132fd0'
'snw_LImon_GISS-E2-R_past1000_r1i1p126_150101-155012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p126/snw_LImon_GISS-E2-R_past1000_r1i1p126_150101-155012.nc' 'SHA256' '76aa5d7c2c6ddb5594355e61c164e7ae61b6b12209192ac43913cc07a8f07067'
'snw_LImon_GISS-E2-R_past1000_r1i1p126_155101-160012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p126/snw_LImon_GISS-E2-R_past1000_r1i1p126_155101-160012.nc' 'SHA256' 'd8eaa1cad7279f8c1d6a85622b9b51a948778becadb2b47d44a7cde60b473840'
'snw_LImon_GISS-E2-R_past1000_r1i1p126_160101-165012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p126/snw_LImon_GISS-E2-R_past1000_r1i1p126_160101-165012.nc' 'SHA256' '05e2f71764fe46d994bee510ec13c201feb9b763e2583ea98d9880aa9a716361'
'snw_LImon_GISS-E2-R_past1000_r1i1p126_165101-170012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p126/snw_LImon_GISS-E2-R_past1000_r1i1p126_165101-170012.nc' 'SHA256' '50b47fa7b543155a4aa45dfec96280b5c2b00ee31a04ff952b3d8f67bccc4e66'
'snw_LImon_GISS-E2-R_past1000_r1i1p126_170101-175012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p126/snw_LImon_GISS-E2-R_past1000_r1i1p126_170101-175012.nc' 'SHA256' '2af6352e773f91500da84b62aa9f6757762ac642e11cce688b58e2df832c2821'
'snw_LImon_GISS-E2-R_past1000_r1i1p126_175101-180012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p126/snw_LImon_GISS-E2-R_past1000_r1i1p126_175101-180012.nc' 'SHA256' 'ac225928b1f761de733c8e6db634f923cf65f111221b73b77b8dda637ce5bae7'
'snw_LImon_GISS-E2-R_past1000_r1i1p126_180101-185012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p126/snw_LImon_GISS-E2-R_past1000_r1i1p126_180101-185012.nc' 'SHA256' 'e64b8a790af6a7814fc88b04eaad65a9a52ffa1c210d777bd186e3d314933009'
'snw_LImon_GISS-E2-R_past1000_r1i1p128_085001-089912.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p128/snw_LImon_GISS-E2-R_past1000_r1i1p128_085001-089912.nc' 'SHA256' '85bf4d9c0bbbac7e1f6829be14ebd27ae9b0bb484744a5e3a2ff07f8365574fc'
'snw_LImon_GISS-E2-R_past1000_r1i1p128_090001-094912.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p128/snw_LImon_GISS-E2-R_past1000_r1i1p128_090001-094912.nc' 'SHA256' 'cdaac8da7f0cd17a9cb9cecbfe17aef0f35e46fec64988acf5720e1af8446068'
'snw_LImon_GISS-E2-R_past1000_r1i1p128_095001-099912.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p128/snw_LImon_GISS-E2-R_past1000_r1i1p128_095001-099912.nc' 'SHA256' '2573baa5536ea2b3ec554b6881bd2034ccc960fb10045641183900635fb3db29'
'snw_LImon_GISS-E2-R_past1000_r1i1p128_100001-105012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p128/snw_LImon_GISS-E2-R_past1000_r1i1p128_100001-105012.nc' 'SHA256' '51b443973c941f125cea9c4e802deeac836a5368dcd1ceaab89fc458ea9850e7'
'snw_LImon_GISS-E2-R_past1000_r1i1p128_105101-110012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p128/snw_LImon_GISS-E2-R_past1000_r1i1p128_105101-110012.nc' 'SHA256' '720f888bd3aada33e7bdb63229d448531d2488cfad6f65c13ace8553cec668cd'
'snw_LImon_GISS-E2-R_past1000_r1i1p128_110101-115012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p128/snw_LImon_GISS-E2-R_past1000_r1i1p128_110101-115012.nc' 'SHA256' 'e6bfe78adfcf2515797f77309ef76c182add570f8ca506dd04bcecb85d15b54a'
'snw_LImon_GISS-E2-R_past1000_r1i1p128_115101-120012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p128/snw_LImon_GISS-E2-R_past1000_r1i1p128_115101-120012.nc' 'SHA256' '71f0d860d455689c7caefc34a73d8c7f3f73e884b7d99fda189d26c10de9a990'
'snw_LImon_GISS-E2-R_past1000_r1i1p128_120101-125012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p128/snw_LImon_GISS-E2-R_past1000_r1i1p128_120101-125012.nc' 'SHA256' '84bf9dbba5a07de7e7268cbe6e30c5a6544c19363a659cd8ecab72511be9197d'
'snw_LImon_GISS-E2-R_past1000_r1i1p128_125101-130012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p128/snw_LImon_GISS-E2-R_past1000_r1i1p128_125101-130012.nc' 'SHA256' '423586f5e000679c3b838d029d08d4264b30e4f38185f012e2bcba2878dbb007'
'snw_LImon_GISS-E2-R_past1000_r1i1p128_130101-135012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p128/snw_LImon_GISS-E2-R_past1000_r1i1p128_130101-135012.nc' 'SHA256' 'd184d066d859bf19aaf476b299bdad14e43eb482878aecf2651911f736f2b8d0'
'snw_LImon_GISS-E2-R_past1000_r1i1p128_135101-140012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p128/snw_LImon_GISS-E2-R_past1000_r1i1p128_135101-140012.nc' 'SHA256' 'fc90ded752b6345f9848525d8548b3c53eb353caa398d9cb4b2d7722f5d67803'
'snw_LImon_GISS-E2-R_past1000_r1i1p128_140101-145012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p128/snw_LImon_GISS-E2-R_past1000_r1i1p128_140101-145012.nc' 'SHA256' '8029625f226e2507b35a1d79f8b16a6f6b2724381cc1dda83c30d531f74f6577'
'snw_LImon_GISS-E2-R_past1000_r1i1p128_145101-150012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p128/snw_LImon_GISS-E2-R_past1000_r1i1p128_145101-150012.nc' 'SHA256' '92574f4be892c0b113b38bac6e0ad7cd4fcb63d044912a4b54991052e4988e55'
'snw_LImon_GISS-E2-R_past1000_r1i1p128_150101-155012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p128/snw_LImon_GISS-E2-R_past1000_r1i1p128_150101-155012.nc' 'SHA256' 'be664b9ee56fa29395972afa65e227b55163dd905dfa91022132a82e8e8d2b16'
'snw_LImon_GISS-E2-R_past1000_r1i1p128_155101-160012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p128/snw_LImon_GISS-E2-R_past1000_r1i1p128_155101-160012.nc' 'SHA256' '6e2a23f1f5a6db759118909a2b3945c9507307ad939f5ae8f89334ddf07687aa'
'snw_LImon_GISS-E2-R_past1000_r1i1p128_160101-165012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p128/snw_LImon_GISS-E2-R_past1000_r1i1p128_160101-165012.nc' 'SHA256' 'dc1a5d42a81695919702393ca26fb2830f943f435d426d75abae0a6fec9742ea'
'snw_LImon_GISS-E2-R_past1000_r1i1p128_165101-170012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p128/snw_LImon_GISS-E2-R_past1000_r1i1p128_165101-170012.nc' 'SHA256' '55dfadabd60291af33f601999e3bde0a2bc942b212ce1755e5e9dbc1ab239f5a'
'snw_LImon_GISS-E2-R_past1000_r1i1p128_170101-175012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p128/snw_LImon_GISS-E2-R_past1000_r1i1p128_170101-175012.nc' 'SHA256' '0cac547712e814188080483e0c41fc988b5054b93dc6631eaaab0fe2ba13b359'
'snw_LImon_GISS-E2-R_past1000_r1i1p128_175101-180012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p128/snw_LImon_GISS-E2-R_past1000_r1i1p128_175101-180012.nc' 'SHA256' 'de8e13b98a3a54ecf82cdc366f01f76695edb5efd6bd6295dc96df205d6390c9'
'snw_LImon_GISS-E2-R_past1000_r1i1p128_180101-185012.nc' 'https://dataserver.nccs.nasa.gov/thredds/fileServer/CMIP5/NASA/GISS/past1000/E2-R_past1000_r1i1p128/snw_LImon_GISS-E2-R_past1000_r1i1p128_180101-185012.nc' 'SHA256' '2dd625020ecc94b0b9f3ecf5a181329690c095d50f8fe30e4c33e9e4023c1467'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java could not be found." >&2
        return 1
    fi
    if java -version 2>&1|grep openjdk >/dev/null; then
        openjdk=1;
    else
        openjdk=0;
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if [ $openjdk -eq 1 ]; then
        mVer=${jversion[0]}
        if ((mVer<5)); then
            echo "Openjdk detected. Version 9+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    else
    
        if ((mVer<5)); then
            echo "Java version 1.5+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    fi
}

check_myproxy_logon() {
    if ! type myproxy-logon >& /dev/null; then
	echo "myproxy-logon could not be found." >&2
	return 1
    fi
    echo "myproxy-logon found" >&2
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2

    if ! wget -O $ESG_HOME/esg-truststore.ts --no-check-certificate https://github.com/ESGF/esgf-dist/raw/master/installer/certs/esg-truststore.ts; then
        echo "Could not fetch esg-truststore";
        return 1
    fi
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    if check_java
    then
	use_java=1
    else	
	use_java=0
	echo "No suitable java for obtaining certificate - checking for myproxy-logon instead" >&2
	check_myproxy_logon || exit 1
    fi
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    


    if [ $use_java -eq 1 ]
    then
        local args=
        #get password
	[[ ! "$pass" ]] && read -sp "MyProxy Password? " pass
        [[ "$openId" ]] && args=$args" --oid $openId"
        [[ "$pass" ]] && args=$args" -P $pass"
        [[ "$username" ]] && args=$args" -l $username"
        
        echo -n $'\nRetrieving Credentials...' >&2
        if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
            echo "Certificate could not be retrieved"
            exit 1
        fi
        echo "done!" >&2
    else
        args=`openid_to_myproxy_args $openId $username` || exit 1
        if ! myproxy-logon $args -b -o $ESG_CREDENTIALS
	then
            echo "Certificate could not be retrieved"
	    exit 1
        fi
	cp $HOME/.globus/certificates/* $ESG_CERT_DIR/	
    fi
}

openid_to_myproxy_args() {
  python - <<EOF || exit 1
import sys
import re
import xml.etree.ElementTree as ET
import urllib2
openid = "$1"
username = "$2" or re.sub(".*/", "", openid)
e = ET.parse(urllib2.urlopen(openid))
servs = [el for el in e.getiterator() if el.tag.endswith("Service")]
for serv in servs:
    servinfo = dict([(re.sub(".*}", "", c.tag), c.text)
                     for c in serv.getchildren()])
    try:
        if servinfo["Type"].endswith("myproxy-service"):
            m = re.match("socket://(.*):(.*)", servinfo["URI"])
            if m:
                host = m.group(1)
                port = m.group(2)
                print "-s %s -p %s -l %s" % (host, port, username)
                break
    except KeyError:
        continue
else:
    sys.stderr.write("myproxy service could not be found\n")
    sys.exit(1)
EOF
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 124 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
